import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
import sqlite3
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–ø–æ–ª—É—á–∏—Ç–µ —É @BotFather)
BOT_TOKEN = "8382779303:AAEw2EMcmprtXBFKN2TusH6CWqksTDk_Dk0"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('abucargo.db')
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            telegram_id INTEGER UNIQUE,
            name TEXT,
            phone TEXT,
            pvz TEXT,
            code TEXT UNIQUE,
            registration_date TEXT
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            track_code TEXT,
            status TEXT,
            date_added TEXT,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')
    
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ–¥–∞ –¥–ª—è –ü–í–ó
def get_next_code(pvz):
    conn = sqlite3.connect('abucargo.db')
    cursor = conn.cursor()
    
    if pvz == '–ñ–∏–π–¥–∞–ª–∏–∫ –£–ü–¢–ö':
        cursor.execute("SELECT COUNT(*) FROM users WHERE pvz = '–ñ–∏–π–¥–∞–ª–∏–∫ –£–ü–¢–ö'")
        count = cursor.fetchone()[0] + 1
        code = f"YX{count}"
    else:
        cursor.execute("SELECT COUNT(*) FROM users WHERE pvz IN ('–ù–∞—Ä–∏–º–∞–Ω', '–î–æ—Å—Ç—É–∫')")
        count = cursor.fetchone()[0] + 1
        code = f"YQ{count}"
    
    conn.close()
    return code

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    conn = sqlite3.connect('abucargo.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE telegram_id = ?", (user_id,))
    user = cursor.fetchone()
    conn.close()
    
    if user:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        await show_main_menu(update, context)
    else:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        keyboard = [
            [InlineKeyboardButton("üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="register")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Abu Cargo!\n\n"
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.",
            reply_markup=reply_markup
        )

# –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    conn = sqlite3.connect('abucargo.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE telegram_id = ?", (user_id,))
    user = cursor.fetchone()
    conn.close()
    
    if user:
        keyboard = [
            [InlineKeyboardButton("üìÉ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
            [InlineKeyboardButton("üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders")],
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="add_order")],
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="edit_profile")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=reply_markup
            )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data == "register":
        await start_registration(update, context)
    elif data == "profile":
        await show_profile(update, context)
    elif data == "my_orders":
        await show_orders(update, context)
    elif data == "add_order":
        await add_order(update, context)
    elif data == "edit_profile":
        await edit_profile(update, context)
    elif data == "back_to_menu":
        await show_main_menu(update, context)
    elif data.startswith("pvz_"):
        pvz = data[4:]
        context.user_data['pvz'] = pvz
        await ask_phone(update, context)

# –ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async def start_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ù–∞—Ä–∏–º–∞–Ω", callback_data="pvz_–ù–∞—Ä–∏–º–∞–Ω")],
        [InlineKeyboardButton("–ñ–∏–π–¥–∞–ª–∏–∫ –£–ü–¢–ö", callback_data="pvz_–ñ–∏–π–¥–∞–ª–∏–∫ –£–ü–¢–ö")],
        [InlineKeyboardButton("–î–æ—Å—Ç—É–∫", callback_data="pvz_–î–æ—Å—Ç—É–∫")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        "üìç –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ü–í–ó:",
        reply_markup=reply_markup
    )

# –ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
async def ask_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="register")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        "üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.contact:
        phone = update.message.contact.phone_number
        context.user_data['phone'] = phone
        await ask_name(update, context)

# –ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏
async def ask_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:"
    )
    context.user_data['awaiting_name'] = True

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async def complete_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('awaiting_name'):
        name = update.message.text
        user_id = update.effective_user.id
        phone = context.user_data.get('phone')
        pvz = context.user_data.get('pvz')
        
        if not all([name, phone, pvz]):
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
        code = get_next_code(pvz)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
        conn = sqlite3.connect('abucargo.db')
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO users (telegram_id, name, phone, pvz, code, registration_date) VALUES (?, ?, ?, ?, ?, ?)",
            (user_id, name, phone, pvz, code, datetime.now().isoformat())
        )
        conn.commit()
        conn.close()
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data.clear()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        await show_profile_from_message(update, context, user_id)

# –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    await show_profile_from_message(update, context, user_id)

async def show_profile_from_message(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    conn = sqlite3.connect('abucargo.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE telegram_id = ?", (user_id,))
    user = cursor.fetchone()
    conn.close()
    
    if user:
        user_id, telegram_id, name, phone, pvz, code, reg_date = user
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ü–í–ó
        pvz_info = get_pvz_info(pvz)
        
        profile_text = f"""üìÉ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—åüìÉ

ü™™ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ö–û–î: {code}
üë§ –§–ò–û: {name}
üìû –ù–æ–º–µ—Ä: {phone}
üè° –ê–¥—Ä–µ—Å: 

üìç –ü–í–ó: {pvz_info['address']}
üìç –ü–í–ó —Ç–µ–ª–µ—Ñ–æ–Ω: {pvz_info['phone']}
üìç –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: {pvz_info['hours']}
üìç –õ–æ–∫–∞—Ü–∏—è –Ω–∞ –ö–∞—Ä—Ç–µ: {pvz_info['map']}

–ê–¥—Ä–µ—Å –≤ –ö–∏—Ç–∞–µ:
Âæ°Áé∫({code})
15727306315
ÊµôÊ±üÁúÅÈáëÂçéÂ∏Ç‰πâ‰πåÂ∏ÇÂåóËãëË°óÈÅìÊò•Êôó‰∫åÂå∫36Ê†ãÂ•ΩËøêÂõΩÈôÖË¥ßËøê5697Â∫ìÂÖ•‰ªìÂè∑:Âæ°Áé∫({code})"""
        
        keyboard = [
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")],
            [InlineKeyboardButton("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–æ—Ñ–∏–ª–µ–º", callback_data="share_profile")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(profile_text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(profile_text, reply_markup=reply_markup)

# –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã
async def show_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    conn = sqlite3.connect('abucargo.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id FROM users WHERE telegram_id = ?", (user_id,))
    user = cursor.fetchone()
    
    if user:
        user_db_id = user[0]
        cursor.execute("SELECT * FROM orders WHERE user_id = ? ORDER BY date_added DESC", (user_db_id,))
        orders = cursor.fetchall()
    
    conn.close()
    
    if not orders:
        text = "üì¶ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤."
    else:
        text = "üì¶ –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n"
        for order in orders:
            order_id, user_id, track_code, status, date_added = order
            date = datetime.fromisoformat(date_added).strftime("%d.%m.%Y")
            text += f"üìÆ –¢—Ä–µ–∫: {track_code}\n"
            text += f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
            text += f"üìÖ –î–∞—Ç–∞: {date}\n"
            text += "‚îÄ" * 20 + "\n"
    
    keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(text, reply_markup=reply_markup)

# –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑
async def add_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.edit_message_text(
        "üì¶ –í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–∫ –∫–æ–¥ –∑–∞–∫–∞–∑–∞:"
    )
    context.user_data['awaiting_track'] = True

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–µ–∫ –∫–æ–¥–∞
async def handle_track_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('awaiting_track'):
        track_code = update.message.text
        user_id = update.effective_user.id
        
        conn = sqlite3.connect('abucargo.db')
        cursor = conn.cursor()
        cursor.execute("SELECT id FROM users WHERE telegram_id = ?", (user_id,))
        user = cursor.fetchone()
        
        if user:
            user_db_id = user[0]
            cursor.execute(
                "INSERT INTO orders (user_id, track_code, status, date_added) VALUES (?, ?, ?, ?)",
                (user_db_id, track_code, "–û–∂–∏–¥–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è", datetime.now().isoformat())
            )
            conn.commit()
        
        conn.close()
        
        context.user_data.clear()
        
        await update.message.reply_text(
            "‚úÖ –ó–∞–∫–∞–∑ –¥–æ–±–∞–≤–ª–µ–Ω —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '–û–∂–∏–¥–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è'!\n"
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–∏—Ç —Å—Ç–∞—Ç—É—Å –∫–æ–≥–¥–∞ –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –≤ –ø—É—Ç–∏."
        )
        await show_main_menu(update, context)

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ü–í–ó
def get_pvz_info(pvz):
    pvz_info = {
        '–ù–∞—Ä–∏–º–∞–Ω': {
            'phone': '+996997111118',
            'address': '–ù–∞—Ä–∏–º–∞–Ω',
            'hours': '9:00 –î–û 18:00',
            'map': 'https://2gis.kg/bishkek/'
        },
        '–ñ–∏–π–¥–∞–ª–∏–∫ –£–ü–¢–ö': {
            'phone': '+996997111118',
            'address': '–ñ–∏–π–¥–µ–ª–∏–∫ –£–ü–¢–ö, –£–ª–∏—Ü–∞ –ù–∞–±–∏ –•–æ–¥–∂–∞, 28/3',
            'hours': '9:00 –î–û 18:00',
            'map': 'https://2gis.kg/bishkek/geo/70030076876455182/72.781486,40.555853'
        },
        '–î–æ—Å—Ç—É–∫': {
            'phone': '+996997111118',
            'address': '–î–æ—Å—Ç—É–∫',
            'hours': '9:00 –î–û 18:00',
            'map': 'https://2gis.kg/bishkek/'
        }
    }
    return pvz_info.get(pvz, pvz_info['–ñ–∏–π–¥–∞–ª–∏–∫ –£–ü–¢–ö'])

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
async def edit_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û", callback_data="edit_name")],
        [InlineKeyboardButton("üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data="edit_phone")],
        [InlineKeyboardButton("üìç –ò–∑–º–µ–Ω–∏—Ç—å –ü–í–ó", callback_data="edit_pvz")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        "‚úèÔ∏è –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=reply_markup
    )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.CONTACT, handle_contact))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, complete_registration))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_track_code))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
